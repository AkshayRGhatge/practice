
-----JavaScript Execution context----

Javascript is a single thread execution


1. Global Execution context
2. Function Execution context
3. Eval Execution context 


Browser do have different GLobal Execution context than node


When java script code run 
Step#1 Global Execution context  (this keyword)
Step#2 Creation Phase/ Memory Execution
Step#3 Execution Phase or Context 


Memory Execution phase in which all the variables get stored value set as undefined note about function name it stores value as defination

In Execution phase whenever the function is execute it will create another environment and execution  thread for the function

1.JS creates Global excution context 
2.Next it creates memory phase
3.Memory phase - In this phase,the variables are set to undefined 
  until the execution phase(next phase) and the functions are set to their definitions.
4.Next it creates the execution phase
5.Execution phase - In this phase,the variables are initialsed to given values and 
  when the function s are called,it creates a memory phase and execution phase for the function 
  just like the main one.

For live demo:
browser > inspect > Sources
create a snippet with few functions and visually experience the call stack follow lifo

Return value is passed to global environment
Execution context get deleted as well




//diagram for DOM



window
  |
  |
Document
  |
  |
 html
  |
head  |  body



DOM Manipulation

document.getElementById('title')
document.getElementById('title').id //to retrieve the id
document.getElementById('title').className // to retrieve the class Name

document.getElementById('title').getAttribute('id') // to get the id
document.getElementById('title').getAttribute('class') //to get class 


document.getElementById('title').setAttribute('class' , 'test')  // this will set the class name to test

document.getElementById('title').setAttribute('class' , 'test heading') //this will set the class name to test and heading

const title=document.getElementById('title') // it will store the id in the variable

title.style.backgroundColor='green'
title.style.padding='5px'
//title value=<h1 id="title" class="text heading" style="background-color:green; padding:15px">DOm Learning on Chai aur code</h1
title.style.borderRadius='15px'

//in order to retrieve the content
title.textContent  //op:- 'DOm Learning on Chai aur code'
title.innerHTML  //op:- 'DOm Learning on Chai aur code'
title.innerText  //op:- 'DOm Learning on Chai aur code'



difference between  textContent and innerText

title.innerText  // It will show the content which is visible in DOM
title.textContent  // It will show the content which is visible in DOM + content which is hidden using display none

title.innerHTML//It will display the text + inside any html tags 

//------------------------------------------

querySelector vs querySelectorAll

document.querySelector('h2') //it will display first h2 tag  in dom op:- loreum test h2 first
document.querySelector('#title') // it will display first h2 tag  in dom op:- <h2>loreum test h2 first</h2>

document.querySelector('input[type="password"]')
ultest
<ul>​…​</ul>​
ultest.querySelector('li')
<li>​…​</li>​
const li=ultest.querySelector('li')
undefined
li
<li>​…​</li>​
li
<li>​…​</li>​
li.style.backgroundColor=red

li.style.backgroundColor="red"
'red'
li.style.padding="5px"
'5px'
li.innerText="five"
//-------------------------querySelectorAll-----------------------//

//*When using querySelectorAll we get node list it act as array so we need to use []**/

//using querySelectAll we get node list
Ex:- .querySelectorALl('.class')   //to find class
templi.querySelectorALL('li')
templi.style.color='green' // give error
templi   //  op: NodeList(3) [li, li, li]
templi[0].style.color="green"



templi.forEach((it)=>{it.style.backgroundColor="yellow"})  // to print the background color 



//-------------------------getElementsByClassName-----------------------//

when using getElementsByClassName the return type is htmlcollection which is differnt then return type node list


const test=document.getElementByClasName('li')  //op:- html collection[]


//we cannot use the for Each when we do have getElementsByClassName so we need to convert it into array in order to loop 
Array.From(test)

