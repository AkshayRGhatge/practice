Selection in the DOM elmenet
  1. getElementById
      Ex: <h2 id="reference">References</h2>
           const referID=document.getElementById('reference');
           console.log(referID); //<h2 id="reference">References</h2>
           console.log(referID.textContent); // References
     Note: it will return the first element if more element have the same id
    
  2. getElementByClassName
       Ex: <h2 class="reference">References</h2>
           const referID=document.getElementByClassName('reference');
           console.log(referID); //returns html collections
           console.log(referID[0].textContent); // References
       Note: It return html collections and need to access the element need to use [0],[1],etc
         
  3. getElementByTagName
       Ex: <h2 id="reference">References</h2>
           const referID=document.getElementByTagName('h2');
           console.log(referID); //return html collection with all the  h2 tags 
           console.log(referID[0].textContent); // References

          loop through all the element
            for (let i=0;i<referID.length;i++){
            console.log(referID[i].textContent);
            }
            
       Note: It return html collections and need to access the element need to use [0],[1],etc

4. querySelector: Return the first matching selector only. use with css selector (p,.className,#idName).
    Ex: <h2 id="idName">IDHeading</h2>
        let header=document.querySelector('#idName');
        console.log(header.textContent) //IDHeading

        <p id="idName">IDHeading</h2>
        let header=document.querySelector('p');
        console.log(header.textContent) //IDHeading

        <p class="idName">IDHeading1</h2>.
        <p class="idName">IDHeading2</h2>
        let header=document.querySelector('.idName');
        console.log(header.textContent) //IDHeading1 IDHeading2



5. querySelectorAll: Return the all matching selector as node. use with css selector (p,.className,#idName)

    Ex: 
        <p class="idName">IDHeading1</h2>.
        <p class="idName">IDHeading2</h2>
        let header=document.querySelectorAll('p');
        header.forEach(function(item){
            console.log(item.textContent);  //IDHeading1 IDHeading2

        })

* Advance CSS selector:
	<body>
    <div class="content">
        <ul class="menu">
            <li class="menu-item">Home</li>
            <li class="menu-item">About</li>
            <li class="menu-item">Services</li>
            <li class="menu-item">Contact</li>
        </ul>
        <section>
            <p>First paragraph in section</p>
            <p>Another paragraph</p>
        </section>
        <section>
            <p>First paragraph in another section</p>
            <p>More content here</p>
        </section>
        <ul class="athletes-list">
            <li>Athlete 1</li>
            <li>Athlete 2</li>
            <li>Athlete 3</li>
            <li>Athlete 4</li>
            <li>Athlete 5</li>
            <li>Athlete 6</li>
        </ul>
        <form>
            <input type="email" placeholder="Enter email">
            <input type="email" placeholder="Another email">
        </form>
        <h2>Heading</h2>
        <p>Paragraph following a heading</p>
    </div>
    <script src="script.js"></script>
</body>

let menuItem=document.querySelectorAll('ul > .menu-item')  // ul > .menu-item meaning select menu-item which is a direct child elememnt of the ul tag
menuItem.forEach(item =>console.log(item.textContent));  //Home About Services Contact 
Note: each in new line

let firstParagraph=document.querySelectorAll('section > p:first-child'); //first p tag within the section tag directly
fistParagraph.forEach(item =>console.log(item.textContent));  //First paragraph in section  First paragraph in another section

let lastParagraph=document.querySelectorAll('section > p:last-child'); //last p tag within the section tag directly
lastParagraph.forEach(item =>console.log(item.textContent));  //Last paragraph in section   Another paragraph

let lastItem=document.querySelectorAll('ul > li:last-child'); //last li tag within the ul tag directly
lastItem.forEach(item =>console.log(item.textContent));  // Contact    Athlete 6


let emailInputs=document.querySelectorAll('input[type="email"]'); //  selects all <input> elements of type email.
emailInputs.forEach(item =>console.log(item.placeholder));  //Enter email   Another email

let thirdListItems=document.querySelectorAll('ul > li:nth-child(3n)'); //  selects every third <li> element inside a <ul>
thirdListItems.forEach(item =>console.log(item.textContent));  //Services Athlete 3  Athlete 6

let paragraphAfterHeading=document.querySelectorAll('h2 + p'); // select first p tag  immediately after h2 tag
paragraphAfterHeading.forEach(item =>console.log(item.textContent));  //Paragraph following a heading



====================================================================================================
TO DO: Closure, parentNode, childNode, children, closest, contains, matches CH03
====================================================================================================




====================================================================================================
Modifying DOM elements
====================================================================================================

--innerText : add the text content

let message=document.getElementById('text')
message.innerText="Akshay";

--innerHTML: add the html + text content  if there are any old content it will replace to the new
let message=document.getElementById('text')
message.innerHTML="<p>Welcome to site</p>";


--Value of Input Element
<div id="formContainer">
        <h1>User Information</h1>
        <label for="nameInput">Name:</label>
        <input type="text" id="nameInput" aria-label="Name">

        <h2>Choose Your Department</h2>
        <select id="departmentSelect" aria-label="Select Department">
            <option value="sales">Sales</option>
            <option value="marketing">Marketing</option>
            <option value="development">Development</option>
        </select>

        <h2>Employee Status</h2>
        <label>
            <input type="radio" name="status" value="full-time" checked> Full-Time
        </label>
        <label>
            <input type="radio" name="status" value="part-time"> Part-Time
        </label>

        <h2>Newsletter Subscription</h2>
        <label>
            <input type="checkbox" id="newsletterCheckbox"> Subscribe to newsletter
        </label>

        <button id="updateButton" onclick="updatePage()">Update Information</button>
    </div>

* For input box
let nameInput=document.getElementById('nameInput')
conosle.log(nameInput.value);
nameInput.value='Akshay Ghatge';  //set the value 

* for  dropdown
let nameInput=document.getElementById('departmentSelect')
conosle.log(nameInput.value);
nameInput.value='Marketing';  //set the value 

* for  radio button
let radioButtons =document.querySelectorAll('input[type="radio"][name="status"]');
radioButtons.forEach(item=>{
if(item.checked){  // checked if the radio button is checked
console.log('Employee Status:', item.value);
}
})

* for checkbox
let newsLetterChecked=document.getElementById('newsletterCheckbox');
conosle.log(newsLetterChecked.checked);
newsLetterChecked.checked=true;  //set the value 


====================================================================================================
Manipulating Attributes and Data attributes
====================================================================================================

getAttribute and setAttribute

 <div id="contentArea">
        <h1>Attribute Manipulation Example</h1>
        <img id="exampleImage" src="puppy.jpg" alt="Puppy Image">
        <a id="exampleLink" href="https://example.com">Visit Example.com</a>
        <button id="changeAttributesButton" onclick="changeAttributes()">Change Attributes</button>
    </div>


    // Changing the source of an image
    let exampleImage = document.getElementById('exampleImage');
    exampleImage.setAttribute('src', 'puppy2.jpg');

   // Changing the href of link
    let exampleImage = document.getElementById('exampleLink');
    exampleImage.setAttribute('href', 'https://google.com');
    exampleImage.textContent="visit google';

====================================================================================================
Working with  Classes
====================================================================================================

JS provides method to add, remove and toggle classes

Method:

	element.classList.add()
	element.classList.toggle()	//remove if it there class or add if it is not
	element.classList.remove()

let textToHighLight=document.getElementById('textTohighlight');
textToHighlight.classList.toggle('highlight');


Style with the JS

 let textToStyle = document.getElementById('textToStyle');

    // Changing background color
    textToStyle.style.backgroundColor = 'yellow';

    // Changing font size
    textToStyle.style.fontSize = '20px';

    // Changing text color
    textToStyle.style.color = 'blue';

    // Adding padding
    textToStyle.style.padding = '10px';

    // Changing font weight
    textToStyle.style.fontWeight = 'bold';



====================================================================================================
Create , Adding and Manage nodes
====================================================================================================
* Create Element
	document.createElement('div')
* Append: to append the element in the dom
	document.appendChild 

	 <div id="contentArea">
			<h1>DOM Manipulation Example</h1>
	</div>

// Create a new paragraph element
let newParagraph = document.createElement('p');

// Set text content for the new element
newParagraph.textContent = 'This is a new paragraph added by JavaScript.';

// Optionally, set some attributes
newParagraph.setAttribute('id', 'newParagraph');
newParagraph.style.color = 'blue';

// Append the new element to the content area
let contentArea = document.getElementById('contentArea');
contentArea.appendChild(newParagraph);

* Option() take 4 arguments  
		1 argument:  innerText 
		2 arguments: innerText, value
		3 and 4 for selecting option


// Populating department dropdown
let departmentSelect = document.getElementById('departmentSelect');
['Sales', 'Marketing', 'Development'].forEach(department => {
    let option = new Option(department, department.toLowerCase());
    departmentSelect.add(option);
});

// Generating an employee profile picture
let profilePictureDiv = document.getElementById('profilePicture');
let employeeImage = new Image();
employeeImage.src = 'employee-placeholder.jpg';  // Replace with a valid image source
employeeImage.alt = 'Employee Profile Picture';
profilePictureDiv.appendChild(employeeImage);


====================================================================================================
Inserting the elements
====================================================================================================
1. appendChild: append the child at the end of the parent

let parentElement=document.getElementById('testParent');
let newElement= document.createElement('li');
newElement.textContent='This is test';
parentElement.appendChild(newElement)

2.insertBefore: allow to add the new element before the element

let newElementInsert= document.createElement('li');
newElementInsert.textContent='Urgent Task';
parentElement.insertBefore(newElementInsert,parentElement.firstChild)  //first parameter is inserting the element , second element is where to insert before 

3. innerHTML will override the existing nodes and replace with the new one
let dynamicContent = document.getElementById('dynamicContent');
dynamicContent.innerHTML = '<p>New project announcement coming soon!</p>';

====================================================================================================
Cloning , Replacing and Removing nodes
====================================================================================================

1. cloneNode: Duplicate the node, we can set to ignore the child node or clone them as well

element.cloneNode(true)  // clones the element and its children
element.cloneNode(false) // clones the element without its children

// Clone a list item and add it to a list
let taskList = document.getElementById('taskList');
let firstTask = taskList.firstElementChild.cloneNode(true);
firstTask.textContent = 'Prepare quarterly report';
taskList.appendChild(firstTask); //add Prepare quarterly report at the end since it is appended at the end

2. replaceChild: used for replacing an element, 

// Replace a paragraph with a new one
let announcements = document.getElementById('announcements');
let newAnnouncement = document.createElement('p');
newAnnouncement.textContent = 'New office opening next month.';
let oldAnnouncement = document.getElementById('announcementText');
announcements.replaceChild(newAnnouncement, oldAnnouncement);


3. removeChild:  Remove an element from parent node
// Remove an element from the page
let removeButton = document.getElementById('removeButton');
removeButton.addEventListener('click', () => {
    if (announcements.firstChild) {
        announcements.removeChild(announcements.firstChild);
    }
});

====================================================================================================
Event Handler
====================================================================================================

1. Way to handle the event.
2. Handler then connected to the event

for example: when the button is click add the event listener or print the console message.


  <div id="dashboard">
        <h1>Company Dashboard</h1>
        <button id="logButton">Don't Click Me</button>
    </div>


	assign the event handler do not execute the function so in the above function do not add the bracket in the logMessage so 
	
	
	document.getElementById("logButton").onclick=logMessage; // if we use the logMessage() it will print directly the console message 

Annoymous or  arrow function
	document.getElementById("logButton").onclick=
		function (){
		console.log("Don't click me");
		};
or
	document.getElementById("logButton").onclick=
		=()=>{
		console.log("Don't click me");
		};
Downside of the eventhandler:
	1. what if we want to handle multiple event when the button is clicked
	2. One big function

====================================================================================================
Event Listner: listen for events and respond to them, webpage senses
====================================================================================================
document.getElementById("logButton").addEventListener('click', () => console.log("Don't click me!"));
document.getElementById("logButton").addEventListener('click', () => console.log("Stop")); //multiple event listener for the same click event

Event object: Whenever an event happens an event object is created,Messenger that contains the details about the event, which element initiate the event, if key is clicked knows which key is click 
document.getElementById("logButton").addEventListener('click', (event) => console.log(event));




